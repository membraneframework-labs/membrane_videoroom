name: Sandbox2 Build and Deploy
on:
  push:
    branches: 
      - "sandbox2"
    paths:
      - "**"
      - "!README.md"

env: 
  VIRTUAL_HOST: sandbox2-videoroom.membrane.work
  INTEGRATED_TURN_IP: 95.217.153.160
  TAG: sandbox2
  PROJECT: sandbox

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=version::$(git rev-parse --short HEAD)"

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push sandbox version 
        id: docker_build_sandbox
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          build-args: VERSION=${{ steps.vars.outputs.version }}
          tags: membraneframework/membrane_videoroom:${{ env.TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:  
      - uses: actions/checkout@v2

      - name: Prepare .env file for the deployment
        id: variables_population
        env: 
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          GF_SECURITY_ADMIN_USER: ${{ secrets.GF_SECURITY_ADMIN_USER  }}
        run: |
          echo "VIRTUAL_HOST=$VIRTUAL_HOST 
          INTEGRATED_TURN_IP=$INTEGRATED_TURN_IP 
          TAG=$TAG 
          DB_USERNAME=$DB_USERNAME 
          DB_PASSWORD=$DB_PASSWORD
          GF_SECURITY_ADMIN_PASSWORD=$GF_SECURITY_ADMIN_PASSWORD
          GF_SECURITY_ADMIN_USER=$GF_SECURITY_ADMIN_USER" > .env

      # commands executed in action below are packed into .sh script, to avoid workflow crashes when some containers or volumes don't exist
      - name: Remove Grafana and Videoroom containers with volumes
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: ${{ secrets.SANDBOX2_HOST }}
          privateKey: ${{ secrets.SSH_PRIV_KEY }}
          command: |
            echo "docker kill ${{ env.PROJECT }}_videoroom_1
            docker kill ${{ env.PROJECT }}_grafana_1
            docker rm ${{ env.PROJECT }}_videoroom_1
            docker rm ${{ env.PROJECT }}_grafana_1
            docker volume rm ${{ env.PROJECT }}_grafana-provisioning
            echo ok" > docker_kill.sh
            chmod +x docker_kill.sh
            ./docker_kill.sh
            rm docker_kill.sh

      - name: Deploy docker compose to a pre-configured server
        id: deploy
        uses: TapTap21/docker-remote-deployment-action@v1.1
        with:
          remote_docker_host: ${{ secrets.SANDBOX2_HOST }}
          ssh_private_key: ${{ secrets.SSH_PRIV_KEY }}
          ssh_public_key: ${{ secrets.SSH_KNOWN_HOSTS}}
          stack_file_name: docker-compose.yml
          args: -p ${{ env.PROJECT }} --env-file .env up -d --remove-orphans
