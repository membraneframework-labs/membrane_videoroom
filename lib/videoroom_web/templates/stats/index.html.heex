<ul id="root">
</ul>

<style>
ul {
  list-style: inside;
  padding-left: 30px
}

canvas {
  width: 200px;
  height: 200px
}
</style>

<script src="https://cdn.jsdelivr.net/npm/phoenix@1.5.4/priv/static/phoenix.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const chartMap = new WeakMap();
  const socket = new Phoenix.Socket("/socket")
  socket.connect()
  console.log("Connected")

  const channel = socket.channel("stats", {})

  channel.join().receive("ok", () => console.log("Joined the channel")).receive("error", (reponse) => console.error("Couldn't join the channel, ", response))
  channel.on("metrics", ({stats}) => {
    render(stats, "root")
  })


  function render(stats, parent_id) {
    for(let [key, value] of Object.entries(stats)) {
      if(value === null) continue;
      const id = `${parent_id}-${key}`;
      let elem = document.getElementById(id);


      if(elem === null) {
        const parent = document.getElementById(parent_id)
        elem = document.createElement('li')
        parent.appendChild(elem)

        if(typeof value === "object" || typeof value === "number") {
          let internal;

          if(typeof value === "number") {
            internal = document.createElement('canvas')
            elem.style.width = "30%"
            elem.style.height = "400px"
            elem.style["margin-bottom"] = "30px"
            const chart = new Chart(internal, {
              type:'line',
              data:
                {
                labels: [],
                datasets: [
                  {
                    data: []
                  }
                ]},
                options: {
                  scales: {
                    y: {beginAtZero: true}
                  },
                  animation: false,
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {display: false}
                  }
                }
            })
            chartMap.set(internal, chart)
          } else {
           internal = document.createElement('ul')
          }

          elem.innerText = `${key}:`
          elem.appendChild(internal);
          elem = internal;
        }

        elem.id = id
      }

      if(typeof value === "object") {
        render(value, id)
      } else if (typeof value === "number") {
        const date = new Date().toLocaleTimeString()
        const chart = chartMap.get(elem)
        chart.data.labels.push(date)
        chart.data.datasets[0].data.push(value)

        if(chart.data.labels.length > 120) {
          const amount = chart.data.labels.length - 120
          chart.data.labels.shift(amount)
          chart.data.datasets[0].data.shift(amount)
        }

        chart.update()
      } else {
        elem.innerText = `${key}: ${value}`
      }
    }
  }
</script>
