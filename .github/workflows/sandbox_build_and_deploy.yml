name: Sandbox Build and Deploy
on:
  push:
    branches: 
      - "sandbox"
    paths:
      - "**"
      - "!README.md"

env: 
  VIRTUAL_HOST: sandbox-videoroom.membrane.work
  INTEGRATED_TURN_IP: 95.216.159.234
  TAG: sandbox

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=version::$(git rev-parse --short HEAD)"

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push sandbox version 
        id: docker_build_sandbox
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          build-args: VERSION=${{ steps.vars.outputs.version }}
          tags: membraneframework/demo_webrtc_videoroom_advanced:${{ env.TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:  
      - uses: actions/checkout@v2

      - name: Set up Elixir
        uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
        with:
          elixir-version: '1.14.0'
          otp-version: '25'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get


      - name: ssh v1
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: ${{ secrets.SANDBOX_HOST }}
          privateKey: ${{ secrets.SSH_PRIV_KEY }}
          command: |
            rm -rf /root/membrane_rtc_engine_timescaledb
            rm -rf /root/grafana
            mkdir /root/grafana
            mkdir /root/grafana/provisioning
            mkdir /root/grafana/provisioning/datasources
            mkdir /root/grafana/provisioning/dashboards
            # git clone https://github.com/membraneframework/membrane_rtc_engine_timescaledb.git 
            # git --git-dir=./membrane_rtc_engine_timescaledb/.git --work-tree=./membrane_rtc_engine_timescaledb/ checkout metrics-visualisation 

      - name: copy file via ssh key datasource
        uses: appleboy/scp-action@master
        with:
          host: sandbox-videoroom.membrane.work
          username: root
          key: ${{ secrets.SSH_PRIV_KEY }}
          source: "deps/membrane_rtc_engine_timescaledb/grafana/provisioning/datasources/timescale_db.yml"
          target: "/root/grafana/provisioning/datasources"

      - name: copy file via ssh key dashboard
        uses: appleboy/scp-action@master
        with:
          host: sandbox-videoroom.membrane.work
          username: root
          key: ${{ secrets.SSH_PRIV_KEY }}
          source: "deps/membrane_rtc_engine_timescaledb/grafana/provisioning/dashboards/rtc_engine_metrics_dashboard.yml,deps/membrane_rtc_engine_timescaledb/grafana/provisioning/dashboards/rtc_engine_metrics_dashboard.json"
          target: "/root/grafana/provisioning/dashboards"

      - name: Prepare .env file for the deployment
        id: variables_population
        env: 
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          GF_SECURITY_ADMIN_USER: ${{ secrets.GF_SECURITY_ADMIN_USER  }}
        run: |
          echo whoami 
          whoami
          echo "VIRTUAL_HOST=$VIRTUAL_HOST 
          INTEGRATED_TURN_IP=$INTEGRATED_TURN_IP 
          TAG=$TAG 
          DB_USERNAME=$DB_USERNAME 
          DB_PASSWORD=$DB_PASSWORD
          GF_SECURITY_ADMIN_PASSWORD=$GF_SECURITY_ADMIN_PASSWORD
          GF_SECURITY_ADMIN_USER=$GF_SECURITY_ADMIN_USER" > .env

      # - name: Execute SSH commmands on remote server
      #   uses: JimCronqvist/action-ssh@master
      #   with:
      #     hosts: ${{ secrets.SANDBOX_HOST }}
      #     privateKey: ${{ secrets.SSH_PRIV_KEY }}
      #     command: |
      #       rm -rf membrane_rtc_engine_timescaledb
      #       git clone https://github.com/membraneframework/membrane_rtc_engine_timescaledb.git 
      #       git --git-dir=./membrane_rtc_engine_timescaledb/.git --work-tree=./membrane_rtc_engine_timescaledb/ checkout metrics-visualisation 

      - name: Deploy docker compose to a pre-configured server
        id: deploy
        uses: TapTap21/docker-remote-deployment-action@v1.1
        with:
          remote_docker_host: ${{ secrets.SANDBOX_HOST }}
          ssh_private_key: ${{ secrets.SSH_PRIV_KEY }}
          ssh_public_key: ${{ secrets.SSH_KNOWN_HOSTS}}
          stack_file_name: docker-compose.yml
          args: -p sandbox --env-file .env up -d --remove-orphans
